doctype html
html(lang="en" xmlns="http://www.w3.org/1999/xhtml")
  head
    title Site Schemes &in; Site Design
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(rel="stylesheet" href="../styles/chharvey.css")
    link(rel="stylesheet" href="styles/styleguide.css")
  body.o-GoldenContainer(class="!bc:w !bi:n !c:b")
    main.o-GoldenContainer__Content
      h1 Site-Wide Schemes
      section#fonts
        h2 Typeface Scheme
        section.o-FlexContainer#ff-base
          h3(class="!w:1o1") Avenir Next
          p.c-FontDescr.
            Used for the main body copy, Avenir Next
            is a sans-serif type with little to no thick/thin transition.
            Being a sans-serif, its #[i italic] is actually an oblique, which just slants the glyphs.
            #[br]
            Similar: #[b Helvetica Neue]
            #[br]
            #[code .a-ff-base]
          figure.c-FontSamp.a-ff-base
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-heading
          h3(class="!w:1o1") Optima
          p.c-FontDescr.
            Optima is used only for headings of body copy
            (not table headings, #[i(lang="la"): abbr(title="et cetera") etc.]).
            It is a sans-serif polyweight type with a moderate thick/thin transition.
            Because of this, it goes well with both monoweight types and serif types, which
            makes it perfect for headings.
            #[br]
            Similar: #[b Seravek], #[b Tahoma].
            #[br]
            #[code .a-ff-heading]
          figure.c-FontSamp.a-ff-heading
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Oh, sphinx of black quartz, judge my vow.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-prose
          h3(class="!w:1o1") Baskerville
          p.c-FontDescr.
            Baskerville is used for text in formal documents and articles.
            It is a serif oldstyle type, which is easy on the eyes and can be read at extensive length.
            Like the #[i heading] font family, it, too, has a moderate thick/thin transition, but has diagonal stress and
            serifs, and true italics, which means it uses a whole new set of glyphs.
            #[br]
            Similar: #[b Palatino], #[b Cochin]#[sup: a.Rf#rf-baskerville(rel="this" href="#fn-baskerville") 1]
            #[br]
            #[code .a-ff-prose]
          figure.c-FontSamp.a-ff-prose
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The five boxing wizards jump quickly.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
          footer(class="!w:1o1")
            ul.c-ListFootnotes
              li.
                #[sup: a.Fn#fn-baskerville(rel="this" href="#rf-baskerville") 1]
                #[b Baskerville], though considered an #[b oldstyle] type, actually has
                a straight, vertical stress, which is typically a feature of #[b modern] types.
                However #[b Palatino] and #[b Cochin] indeed have diagonal stresses.
        section.o-FlexContainer#ff-accent
          h3(class="!w:1o1") Helvetica Neue
          p.c-FontDescr.
            Helvetica Neue is used for typographical and #[abbr(title="user interface") UI]
            components such as ledes, pull quotes, captions, alerts, labels, buttons, and keys.
            Like #[b Avenir], it is a monoweight sans-serif, yet slightly heavier.
            #[br]
            Similar: #[b Helvetica]
            #[br]
            #[code .a-ff-accent]
          figure.c-FontSamp.a-ff-accent
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Heavy boxes perform quick waltzes and jigs.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-code
          h3(class="!w:1o1") Menlo
          p.c-FontDescr.
            Menlo is a monospace type used for sample code on the site. Personally, I dislike
            monospace fonts with serifs, so I chose a sans-serif.
            #[br]
            Similar: #[b Monaco], #[b Andale Mono]
            #[br]
            #[code .a-ff-code]
          figure.c-FontSamp.a-ff-code
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-math
          h3(class="!w:1o1") Didot
          p.c-FontDescr.
            Didot is a serif modern type use for mathematical spans and spans in foreign
            languages. It has a radical thick/thin transition, vertical stress, and
            straight horizontal serifs. With a cold yet elegant look, this font family makes
            long spans of text hard to read, but that&rsquo;s okay because this font is
            used only for short expressions.
            #[br]
            Similar: #[b Bodoni 72], #[b Times]
            #[br]
            #[code .a-ff-math]
          figure.c-FontSamp.a-ff-math
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence Sixty zippers were quickly picked from the woven jute bag.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
        section.o-FlexContainer#ff-script
          h3(class="!w:1o1") Zapfino
          p.c-FontDescr.
            Zapfino is used for very fancy elements such as drop-caps and subheadings.
            Use this font family sparingly.
            #[br]
            #[code .a-ff-script]
          figure.c-FontSamp.a-ff-script
            div.c-FontSamp__Letter Aa
            p.c-FontSamp__Sentence The quick brown fox jumps over the lazy dog.
          form.c-FontForm
            label
              input(type="checkbox" name="fs" value="italic")
              |  italic
            label
              input(type="checkbox" name="fv" value="small-caps")
              |  small-caps
            label
              input(type="range" name="fw" min="100" max="900" step="100" value="400")
              input(type="text" value="400 (normal)" disabled="" style="width:100px;")
            input(type="reset")
      section
        h2 Font Sizes
        p.
          The first list shows atoms prefixed #[code fz-], which change only font size,
          mainly used for inline (text-level) elements. These atoms use #[b em] units,
          so the font sizes will scale according to their parents.
          The second lists atoms prefixed #[code fzb-], for font-size/line-height combos,
          which are useful for maintaining vertical rhythm on block elements.
          These use #[b rem] units, which are absolute.
          Only the first list is demonsrated (the second will look exactly
          the same save the line height).
        p.
          Notice there are two pairs of classes for each size.
          The first classname has an
          #[abbr(title="Système International d’Unités" lang="fr") SI]
          prefix that corresponds to a power of 1000,
          while the second classname uses a Greek/Latin prefix that indicates
          the value of #[code font-size] in its definition.
          The first set is good for comparing two different atoms, and
          the second set is good for when you need to know the absolute size.
        figure
          ul.o-ListBare(class="!sp:nw !of:a")
            li.a-fz-peta   .a-fz-peta  , .a-fz-hex     (6.00)
            li.a-fz-tera   .a-fz-tera  , .a-fz-tet     (4.00)
            li.a-fz-giga   .a-fz-giga  , .a-fz-tri     (3.00)
            li.a-fz-mega   .a-fz-mega  , .a-fz-di      (2.00)
            li.a-fz-kilo   .a-fz-kilo  , .a-fz-sesqui  (1.50)
            li.a-fz-normal .a-fz-normal                (1.00)
            li.a-fz-milli  .a-fz-milli , .a-fz-dodrans (0.75)
            li.a-fz-micro  .a-fz-micro , .a-fz-semi    (0.50)
        ul(class="!sp:nw")
          li .a-fzb-peta  , .a-fzb-hex     (6.00/0.25)
          li .a-fzb-tera  , .a-fzb-tet     (4.00/0.375)
          li .a-fzb-giga  , .a-fzb-tri     (3.00/0.50)
          li .a-fzb-mega  , .a-fzb-di      (2.00/0.75)
          li .a-fzb-kilo  , .a-fzb-sesqui  (1.50/1.00)
          li .a-fzb-normal                 (1.00/1.50)
          li .a-fzb-milli , .a-fzb-dodrans (0.75/2.00)
          li .a-fzb-micro , .a-fzb-semi    (0.50/3.00)
      section
        h2 Headings and Paragraphs
        figure
          h1 Heading 1
          p(lang="la").
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Aliquam sagittis suscipit nunc, a cursus libero euismod at.
            Nulla placerat neque massa, quis interdum leo efficitur vel.
            Donec feugiat varius arcu non volutpat.
            Mauris eget mauris ut mauris auctor mattis id vel justo.
            Nulla dictum arcu nec suscipit mollis.
            Maecenas a iaculis nisl, ut pretium est. Nulla facilisi.
          h2 Heading 2
          p(lang="la").
            Suspendisse ut auctor enim.
            Aliquam viverra enim vitae ante aliquet venenatis.
            Sed vel nibh sit amet sapien fermentum mattis nec non arcu.
            Praesent dapibus velit quis lectus tempus, ut ullamcorper nibh facilisis.
            Aenean tincidunt ante risus, semper malesuada libero consectetur id.
            Praesent vel ligula ut enim porttitor porta. Aenean eu ullamcorper mi.
            Integer blandit est quam, eget mattis urna scelerisque quis.
            Maecenas sapien sapien, ornare nec lobortis eget, tincidunt sed ligula.
            Maecenas risus nibh, volutpat sed euismod non, semper eget neque.
            Integer varius egestas risus, volutpat sagittis turpis convallis eget.
            Vivamus pulvinar ligula eget mi tincidunt, eget faucibus justo laoreet.
            In sapien lacus, egestas faucibus laoreet eu, tempor sit amet lorem.
            Sed luctus congue tortor a scelerisque.
          h3 Heading 3
          p(lang="la").
            Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
            Nunc sit amet scelerisque lectus. Cras cursus sed dui quis convallis.
            Quisque id justo elit.
            Fusce ut quam non sem efficitur accumsan sed id neque.
            Mauris finibus dignissim gravida.
            In dignissim mauris ac odio molestie volutpat.
            Nulla tellus justo, finibus sed volutpat sed, tristique ac lacus.
            Suspendisse sit amet fermentum sapien.
            Aliquam luctus laoreet iaculis.
            Proin lacinia orci vitae tellus pellentesque porttitor.
          h4 Heading 4
          p(lang="la").
            Aenean consectetur suscipit urna, non vehicula lacus blandit et.
            Integer at lacus et diam tristique suscipit.
            Ut cursus massa sit amet nisl convallis, elementum accumsan sapien mattis.
            Vestibulum vitae magna ac tellus accumsan pharetra vulputate vitae erat.
            Vestibulum est dui, elementum non sagittis ac, sagittis accumsan justo.
            Donec at vestibulum diam. Nam et volutpat dolor, at pulvinar nisi.
            Curabitur aliquam maximus nulla eu venenatis.
            Nam aliquam lorem non felis dignissim dictum.
            Pellentesque sagittis vehicula nisl non luctus.
            Pellentesque eget ligula hendrerit, blandit enim consequat, dictum sem.
            In quis lectus in lectus interdum laoreet eu quis quam.
            Fusce auctor posuere purus, quis semper libero dignissim euismod.
            Curabitur commodo mauris a sapien vulputate, eget pharetra urna facilisis.
          h5 Heading 5
          p(lang="la").
            Donec finibus ut lectus finibus pellentesque.
            Nulla euismod feugiat nulla nec posuere.
            Sed ac est id sem sagittis rhoncus eu ac neque.
            Aliquam eu metus sagittis, porta turpis id, scelerisque magna.
            Nulla venenatis elementum est, semper viverra felis tristique sit amet.
            Mauris nec ipsum id orci porttitor auctor sed sit amet sem.
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Etiam tellus leo, venenatis sit amet ipsum non, sagittis feugiat ante.
          h6 Heading 6
          p(lang="la").
            Donec vel dolor ut felis dapibus ultricies vitae a nibh.
            Ut semper odio est, sed lacinia ligula gravida ut.
            Vestibulum facilisis viverra pulvinar.
            Suspendisse maximus nisl sit amet augue vulputate, vel porta nunc molestie.
            Aliquam mauris diam, pharetra vel consectetur quis, rhoncus in risus.
            Donec ut quam massa.
            Vestibulum sapien justo, commodo a eros in, rhoncus interdum nisl.
            Etiam a porta lectus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      section
        h2 Portal Color Scheme
        footer.
          This color scheme is based on the
          #[a(rel="external" href="http://www.thinkwithportals.com/"): cite Portal] video game series.
        section.o-FlexContainer
          h3(class="!w:1o1") Main Portal Colors
          section.o-Box(class="!w:1o2").a-bc-aperturewhite
            h4.ColorTitle Aperture White
            p
              code.ColorCode .a-bc-aperturewhite
              br
              code.ColorCode hsv(217,   5%, 100%) == #f2f7ff
            p.
              The purity of Aperture Science in all its glory. This dazzling
              brilliance of bluish light seen on the portalable panels coated with
              Conversion Gel makes the background emit an eerie glow, like the full moon.
            ul
              li body background
          section.o-Box(class="!w:1o2").a-bc-apertureblack.h-darkbg
            h4.ColorTitle Aperture Black
            p
              code.ColorCode .a-bc-apertureblack
              br
              code.ColorCode hsv( 37, 100%,   5%) == #0d0800
            p.
              The polar opposite of Aperture White. Representing the true dark nature
              of the Enrichment Center, this is the color of the panels that inhibit
              portals. A hint of orange is infinitesimally noticeable. What better way to
              complement the background color than the color of normal text?
            ul
              li body text
          section.o-Box(class="!w:1o2").a-bc-lakesuperior.h-darkbg
            h4.ColorTitle Lake Superior
            p
              code.ColorCode .a-bc-lakesuperior
              br
              code.ColorCode hsv(247, 100%,  60%) == #120099
            p.
              This Great Lake borders #[a Ontonagon, MI], the location of the
              Aperture Science Enrichment Center. A perfect fit for superior headings on
              a page.
            ul
              li major heading text
              li ledes and drop caps
          section.o-Box(class="!w:1o2").a-bc-facilityabyss.h-darkbg
            h4.ColorTitle Facility Abyss
            p
              code.ColorCode .a-bc-facilityabyss
              br
              code.ColorCode hsv(187,  40%,  40%) == #3d6166
            p.
              This color can be seen in the endless depths of the subterranean
              testing facility. This color is for #[i minor] headings of a page.
            ul
              li minor heading text
          section.o-Box(class="!w:1o2").a-bc-atlas.h-darkbg
            h4.ColorTitle Atlas
            p
              code.ColorCode .a-bc-atlas
              br
              code.ColorCode hsv(217, 100%, 100%) == #0062ff
            p.
              Short and stout, Atlas is one of the two robots used for testing.
              Untouched hyperlinks are dedicated to his digital iris.
            ul
              li link text
          section.o-Box(class="!w:1o2").a-bc-pbody
            h4.ColorTitle P-Body
            p
              code.ColorCode .a-bc-pbody
              br
              code.ColorCode hsv( 37, 100%, 100%) == #ff9d00
            p.
              Tall and wiry, P-body is one of the two robots used for testing.
              Hovered hyperlinks are dedicated to his (or her?) digital iris.
            ul
              li hover link text
        section.o-FlexContainer
          h3(class="!w:1o1") More Portal Colors
          section.o-Box(class="!w:1o2").a-bc-cavescaves.h-darkbg
            h4.ColorTitle Cave&rsquo;s Caves
            p
              code.ColorCode .a-bc-cavescaves
              br
              code.ColorCode hsv( 28,  66.6%,  50%) == #80522b
            p.
              Cave&rsquo;s underground salt mines were the ideal venue for early
              test chambers.
          section.o-Box(class="!w:1o2").a-bc-asbestos
            h4.ColorTitle Asbestos
            p
              code.ColorCode .a-bc-asbestos
              br
              code.ColorCode hsv( 46, 100.0%,  75%) == #bf9300
            p.
              The forgotten underground test chambers are ridden with this harmful
              substance. Or so Mr.&nbsp;Johnson says.
          section.o-Box(class="!w:1o2").a-bc-repulsion
            h4.ColorTitle Repulsion Gel
            p
              code.ColorCode .a-bc-repulsion
              br
              code.ColorCode hsv(202,  80.0%, 100%) == #33b4ff
            p.
              Good news, you&rsquo;re not part of the control group; you get the gel.
              Bad news, it does #[em not] like the human skeleton. Turns out you might
              just break every bone in your legs anyway.
            ul
              li code/kbd/samp on print
          section.o-Box(class="!w:1o2").a-bc-propulsion
            h4.ColorTitle Propulsion Gel
            p
              code.ColorCode .a-bc-propulsion
              br
              code.ColorCode hsv( 22,  80.0%, 100%) == #ff7e33
            p #[i Forwarding] the cause of science.
            ul
              li subheading text
        section.o-FlexContainer
          h3(class="!w:1o1") UI Component Colors
          section.o-Box(class="!w:1o2").a-bc-deploying.h-darkbg
            h4.ColorTitle Deploying
            p
              code.ColorCode .a-bc-deploying
              br
              code.ColorCode hsv(  7,  80%, 100%) == #ff4b33
            p.
              The one word you never want to hear without a portal gun. Just as the
              iris of a Sentry Turret, this color is briefly seen, providing a subtle accent
              on the site.
            ul
              li Danger components
          section.o-Box(class="!w:1o2").a-bc-hereye
            h4.ColorTitle HER Eye
            p
              code.ColorCode .a-bc-hereye
              br
              code.ColorCode hsv( 52,  80%, 100%) == #ffe433
            p.
              This color alone will scare the
              prokaryotic-microorganism-infested-fecal-matter out of you. See where you can
              find it. You monster.
            ul
              li Caution components
          section.o-Box(class="!w:1o2").a-bc-neurotoxin
            h4.ColorTitle Neurotoxin
            p
              code.ColorCode .a-bc-neurotoxin
              br
              code.ColorCode hsv( 97,  40%,  80%) == #9acc7a
            p.
              Long ago an #[i accident] resulted in the unleashing of
              this deadly vapor and the murdering of the entire human staff of
              Aperture Laboratories. Some say it could happen again, but this time on the
              test subjects&hellip;
            ul
              li Success components
          section.o-Box(class="!w:1o2").a-bc-bridges
            h4.ColorTitle Bridges of Light
            p
              code.ColorCode .a-bc-bridges
              br
              code.ColorCode hsv(202,  40%, 100%) == #99daff
            p.
              Hard Light Bridges are literally massless, yet they can sustain
              infinite weight, as Chell can attest to.
            ul
              li Info components
          section.o-Box(class="!w:1o2").a-bc-companion
            h4.ColorTitle Heart of a Companion
            p
              code.ColorCode .a-bc-companion
              br
              code.ColorCode hsv(337,  40%, 100%) == #ff99c0
            p.
              Believed to be sentient by some and alive by others, the
              Weighted Companion Cube has been said to provide advice and display emotions
              such as brevity, care, and love. It is even believed to hum opera when near
              a friend. A perfect color for helpful elements on a Web page.
            ul
              li Help components
          section.o-Box(class="!w:1o2").a-bc-vilify.h-darkbg
            h4.ColorTitle Vilify
            p
              code.ColorCode .a-bc-vilify
              br
              code.ColorCode hsv(277, 100%, 100%) == #9d00ff
            p: q(class="!fs:t" cite="https://www.youtube.com/watch?v=G-Vg2YS-sFE").
              You&rsquo;ve
              got sucker&rsquo;s luck. Have you given up? Does it feel
              like a trial? Does it trouble your mind the way you trouble mine?
            ul
              li alert links
        section.o-FlexContainer
          h3(class="!w:1o1") Grays and Shadows
          section.o-Box(class="!w:1o2").a-bc-graylite
            h4.ColorTitle Aperture Gray Lite
            p
              code.ColorCode .a-bc-graylite
              br
              code.ColorCode mix(mix(@aperturewhite, @apertureblack, 80%), @pbody, 95%) == #c7c5c2
            ul
              li light component default
          section.o-Box(class="!w:1o2").a-bc-graydark.h-darkbg
            h4.ColorTitle Aperture Gray Dark
            p
              code.ColorCode .a-bc-graydark
              br
              code.ColorCode mix(mix(@apertureblack, @aperturewhite, 80%), @atlas, 95%) == #383a3d
            ul
              li dark component default
          section.o-Box(class="!w:1o2").a-bc-aperturewhite
            h4.ColorTitle Overlapping Shade Light
            form
              label background color: 
                input.js-rowbc-swatch(type="color" value="#f2f7ff")
              input.js-reset-swatch(type="reset")
            p
              | each:
              br
              code.ColorCode .a-bc-shadelight
              br
              code.ColorCode fadeout(@apertureblack, 80%) == rgba(#0d0800, 0.2)
            | Zero
            div.o-Box.a-bc-shadelight One
              div.o-Box.a-bc-shadelight Two
                div.o-Box.a-bc-shadelight Three
                  div.o-Box.a-bc-shadelight Four
                    div.o-Box.a-bc-shadelight Five
                      div.o-Box.a-bc-shadelight Six
                        div.o-Box.a-bc-shadelight Seven
          section.o-Box(class="!w:1o2").a-bc-apertureblack.h-darkbg
            h4.ColorTitle Overlapping Tint Light
            form
              label background color: 
                input.js-rowbc-swatch(type="color" value="#0d0800")
              input.js-reset-swatch(type="reset")
            p
              | each:
              br
              code.ColorCode .a-bc-tintlight
              br
              code.ColorCode fadeout(@aperturewhite, 80%) == rgba(#f2f7ff, 0.2)
            | Zero
            div.o-Box.a-bc-tintlight One
              div.o-Box.a-bc-tintlight Two
                div.o-Box.a-bc-tintlight Three
                  div.o-Box.a-bc-tintlight Four
                    div.o-Box.a-bc-tintlight Five
                      div.o-Box.a-bc-tintlight Six
                        div.o-Box.a-bc-tintlight Seven
          section.o-Box(class="!w:1o2").a-bc-aperturewhite
            h4.ColorTitle Overlapping Shade Heavy
            form
              label background color: 
                input.js-rowbc-swatch(type="color" value="#f2f7ff")
              input.js-reset-swatch(type="reset")
            p
              | each:
              br
              code.ColorCode .a-bc-shadeheavy
              br
              code.ColorCode fadeout(@apertureblack, 20%) == rgba(#0d0800, 0.8)
            | Zero
            div.o-Box.a-bc-shadeheavy One
              div.o-Box.a-bc-shadeheavy Two
                div.o-Box.a-bc-shadeheavy Three
                  div.o-Box.a-bc-shadeheavy Four
          section.o-Box(class="!w:1o2").a-bc-apertureblack.h-darkbg
            h4.ColorTitle Overlapping Tint Heavy
            form
              label background color: 
                input.js-rowbc-swatch(type="color" value="#0d0800")
              input.js-reset-swatch(type="reset")
            p
              | each:
              br
              code.ColorCode .a-bc-tintheavy
              br
              code.ColorCode fadeout(@aperturewhite, 20%) == rgba(#f2f7ff, 0.8)
            | Zero
            div.o-Box.a-bc-tintheavy One
              div.o-Box.a-bc-tintheavy Two
                div.o-Box.a-bc-tintheavy Three
                  div.o-Box.a-bc-tintheavy Four
        aside.o-Box.o-Box--dialog(style="margin-bottom: 1.5rem; border: 1px solid #9acc7a; background: rgba(0, 0, 0, 0.05); box-shadow: inset 0 0 0.5rem 0rem rgba(0,0,0,0.2);")
          h3(class="!ta:c") Overlapping Opacity
          p.c-Subhead Calculating the Perceived Alpha Value
          p.
            The common intuition that overlapping alphas are simply added
            is incorrect. For example, a block with an opacity of 0.4 in front of another block
            with an opacity of 0.6 does not result in a total opacity of 1.0. It actually results
            in an opacity of 0.76. The fact of the matter is that no matter how many translucent
            blocks overlap (as long as their alphas are less than 1), you will never get something
            completely opaque. (You may get very close, like 0.99991, but not exactly 1.0.)
            This implies that the model for overlapping opacities is some sort of
            exponential decay#[sup: a.Rf#rf-decay(href="#fn-decay") 1]
            that increasingly and asymptotically approaches 1.0.
          p.
            To cut to the chase, the formula used to calculate the final resulting alpha,
            call it #[span.js-mt \alpha], from a given number of alphas,
            #[span.js-mt \alpha_1, \alpha_2, \dots, \alpha_n], is
          p.js-mb \alpha = 1 - \bigl[\left(1-\alpha_1\right)\left(1-\alpha_2\right)\cdots\left(1-\alpha_n\right)\bigr]
          p Therefore the true resulting opacity from two overlapping blocks with opacity 0.4 and 0.6 is
          p.js-mb(style="min-height:7.5rem;").
            \begin{align}
              \alpha
              &= 1 - \left(1-0.6\right)\left(1-0.4\right) \\
              &= 1-\left(0.4\right)\left(0.6\right) \\
              &= 1-0.24 \\
              &= 0.76
            \end{align}
          p.
            If all of the alphas are a constant #[span.js-mt \alpha_1], however, we may convert
            this formula into a function of one variable: the number of overlapping blocks.
            This results in our desired increasing exponential decay function. Indeed,
            its right-hand limit is 1.
          p.js-mb \alpha(n;\alpha_1) = 1 - \left(1-\alpha_1\right)^n
          footer: ul.c-ListFootnotes
              li.
                #[sup: a.Fn#fn-decay(href="#rf-decay") 1]
                I call it exponential #[em decay] because the base of the exponent is less than 1.
                This is true even if the function itself is increasing.
                It would only be called exponential #[em growth] if the base were more than 1,
                again, whether the function were increasing or decreasing.
      section
        h2 Code Color Scheme
        //- p.
        //-   Then there&rsquo;s the added bonus of its name being based off of the Moon, which is an
        //-   integral part of #[cite Portal] gameplay.
        section.o-FlexContainer
          h3(class="!w:1o1") #[cite Solarized] Color Scheme
          section.o-Box(class="!w:1o2").a-bc-s03.h-darkbg
            h4.ColorTitle Solarized Base03
            ul
              li dark code background
          section.o-Box(class="!w:1o2").a-bc-s3
            h4.ColorTitle Solarized Base3
            ul
              li light code background
          section.o-Box(class="!w:1o2").a-bc-s02.h-darkbg
            h4.ColorTitle Solarized Base02
            ul
              li dark code border
          section.o-Box(class="!w:1o2").a-bc-s2
            h4.ColorTitle Solarized Base2
            ul
              li light code border
          section.o-Box(class="!w:1o2").a-bc-s01
            h4.ColorTitle Solarized Base01
            ul
              li light code emphasis
              li dark code comment
          section.o-Box(class="!w:1o2").a-bc-s1
            h4.ColorTitle Solarized Base1
            ul
              li light code comment
              li dark code emphasis
          section.o-Box(class="!w:1o2").a-bc-s00
            h4.ColorTitle Solarized Base00
            ul
              li light code text
          section.o-Box(class="!w:1o2").a-bc-s0
            h4.ColorTitle Solarized Base0
            ul
              li dark code text
          section.o-Box(class="!w:1o2").a-bc-sr
            h4.ColorTitle Solarized Red
            ul
              li programming control (#[code if], #[code for], #[code switch], #[code return])
              li other control (#[code public], #[code private], #[code static])
          section.o-Box(class="!w:1o2").a-bc-sc
            h4.ColorTitle Solarized Cyan
            ul
              li HTML attribute values
              li CSS property values
              li strings (except in CSS#[sup: a.Rf#rf-cssstring(rel="this" href="#fn-cssstring") 2])
          section.o-Box(class="!w:1o2").a-bc-so
            h4.ColorTitle Solarized Orange
            ul
              li delimiters and operators (#[code +], #[code ==], #[code .], #[code new], #[code typeof])
          section.o-Box(class="!w:1o2").a-bc-sb
            h4.ColorTitle Solarized Blue
            ul
              li HTML tags
              li CSS/Less class selectors
              li JS function definitions and function calls
          section.o-Box(class="!w:1o2").a-bc-sy
            h4.ColorTitle Solarized Yellow
            ul
              li HTML attribute names
              li CSS property names
              li pre-defined keywords and types (#[code var], #[code function], #[code int], #[code class])
          section.o-Box(class="!w:1o2").a-bc-sv
            h4.ColorTitle Solarized Violet
            ul
              li variable names
              li function arguments
          section.o-Box(class="!w:1o2").a-bc-sg
            h4.ColorTitle Solarized Green
            ul
              li HTML characters and entities
              li CSS numeric values with units
              li constant values (numbers, colors, booleans, #[code null])
          section.o-Box(class="!w:1o2").a-bc-sm
            h4.ColorTitle Solarized Magenta
            ul
              li string delimiters (#[code &quot;] and #[code &apos;])
              li #[sup: a.Fn#fn-cssstring(rel="this" href="#rf-cssstring") 2]CSS strings
              li object/class/function references (custom, built-in, #[code this], #[code prototype], #[code String], #[code Array])
        section.o-FlexContainer
          h3(class="!w:1o1") #[i Lunarized] Color Scheme
          section.o-Box(class="!w:1o2").a-bc-l03.h-darkbg
            h4.ColorTitle Lunarized Base03
            p.ColorRelation inverse of Solarized Base 03
            ul
              li dark code background
          section.o-Box(class="!w:1o2").a-bc-l3
            h4.ColorTitle Lunarized Base3
            p.ColorRelation inverse of Solarized Base 3
            ul
              li light code background
          section.o-Box(class="!w:1o2").a-bc-l02.h-darkbg
            h4.ColorTitle Lunarized Base02
            p.ColorRelation inverse of Solarized Base 02
            ul
              li dark code border
          section.o-Box(class="!w:1o2").a-bc-l2
            h4.ColorTitle Lunarized Base2
            p.ColorRelation inverse of Solarized Base 2
            ul
              li light code border
          section.o-Box(class="!w:1o2").a-bc-l01
            h4.ColorTitle Lunarized Base01
            p.ColorRelation inverse of Solarized Base 01
            ul
              li light code emphasis
              li dark code comment
          section.o-Box(class="!w:1o2").a-bc-l1
            h4.ColorTitle Lunarized Base1
            p.ColorRelation inverse of Solarized Base 1
            ul
              li light code comment
              li dark code emphasis
          section.o-Box(class="!w:1o2").a-bc-l00
            h4.ColorTitle Lunarized Base00
            p.ColorRelation inverse of Solarized Base 00
            ul
              li light code text
          section.o-Box(class="!w:1o2").a-bc-l0
            h4.ColorTitle Lunarized Base0
            p.ColorRelation inverse of Solarized Base 0
            ul
              li dark code text
          section.o-Box(class="!w:1o2").a-bc-lc
            h4.ColorTitle Lunarized Cyan
            p.ColorRelation complement of Solarized Red
          section.o-Box(class="!w:1o2").a-bc-lr
            h4.ColorTitle Lunarized Red
            p.ColorRelation complement of Solarized Cyan
          section.o-Box(class="!w:1o2").a-bc-lb
            h4.ColorTitle Lunarized Blue
            p.ColorRelation complement of Solarized Orange
          section.o-Box(class="!w:1o2").a-bc-lo
            h4.ColorTitle Lunarized Orange
            p.ColorRelation complement of Solarized Blue
          section.o-Box(class="!w:1o2").a-bc-li
            h4.ColorTitle Lunarized Indigo
            p.ColorRelation complement of Solarized Yellow
          section.o-Box(class="!w:1o2").a-bc-ly
            h4.ColorTitle Lunarized Yellow
            p.ColorRelation complement of Solarized Violet
          section.o-Box(class="!w:1o2").a-bc-lv
            h4.ColorTitle Lunarized Violet
            p.ColorRelation complement of Solarized Green
          section.o-Box(class="!w:1o2").a-bc-lg
            h4.ColorTitle Lunarized Green
            p.ColorRelation complement of Solarized Magenta
        section
          h3 Interactive Example
          form.o-FlexContainer
            p(class="!w:1o1").
              Check the radio buttons to add/remove classes to the #[code pre] Element below,
              which will change its color theme.
            fieldset(class="!w:1o3")
              legend Backgrounds
              ul.o-ListBare
                li
                  input#check-t-bg-sol-lite(type="radio" name="bg" value="t-bg-sol-lite")
                  label(for="check-t-bg-sol-lite") t-bg-sol-lite
                li
                  input#check-t-bg-sol-dark(type="radio" name="bg" value="t-bg-sol-dark")
                  label(for="check-t-bg-sol-dark") t-bg-sol-dark
                li
                  input#check-t-bg-lun-lite(type="radio" name="bg" value="t-bg-lun-lite" checked="")
                  label(for="check-t-bg-lun-lite") t-bg-lun-lite (default)
                li
                  input#check-t-bg-lun-dark(type="radio" name="bg" value="t-bg-lun-dark")
                  label(for="check-t-bg-lun-dark") t-bg-lun-dark
            fieldset(class="!w:1o3")
              legend Foregrounds
              ul.o-ListBare
                li
                  input#check-t-fg-sol-lite(type="radio" name="fg" value="t-fg-sol-lite" checked="")
                  label(for="check-t-fg-sol-lite") t-fg-sol-lite (default)
                li
                  input#check-t-fg-sol-dark(type="radio" name="fg" value="t-fg-sol-dark")
                  label(for="check-t-fg-sol-dark") t-fg-sol-dark
                li
                  input#check-t-fg-lun-lite(type="radio" name="fg" value="t-fg-lun-lite")
                  label(for="check-t-fg-lun-lite") t-fg-lun-lite
                li
                  input#check-t-fg-lun-dark(type="radio" name="fg" value="t-fg-lun-dark")
                  label(for="check-t-fg-lun-dark") t-fg-lun-dark
            fieldset(class="!w:1o3")
              legend Accents
              ul.o-ListBare
                li
                  input#check-default(type="radio" name="ac" value="" checked="")
                  label(for="check-default") none (default)
                li
                  input#check-t-ac-sol(type="radio" name="ac" value="t-ac-sol")
                  label(for="check-t-ac-sol") t-ac-sol
                li
                  input#check-t-ac-lun(type="radio" name="ac" value="t-ac-lun")
                  label(for="check-t-ac-lun") t-ac-lun
            p(class="!w:1o1"): input#reset-pre(type="reset")
          pre#syntax-example.
            #[span.c__Kwd function] #[span.c__Cmd Person(#[span.c__Arg name])] { <small class="c__Comm">// constructor for class `Person`</small>
              #[span.c__Obj this].greet = #[span.c__Str 'hello!'];
            }
            #[span.c__Kwd function] #[span.c__Cmd TestSubject(#[span.c__Arg name, adopted])] { <small class="c__Comm">// constructor for class `TestSubject`</small>
              #[span.c__Obj Person].#[span.c__Cmd call(#[span.c__Arg #[span.c__Obj this], name, adopted])]; <small class="c__Comm">// calls the parent constructor</small>
              #[span.c__Ctl if (#[span.c__Opr typeof] #[span.c__Arg adopted] #[span.c__Opr ==] #[span.c__Str 'boolean'])]
                #[span.c__Obj this.]is_adopted = #[span.c__Arg adopted];
              #[strong.c__Emph #[span.c__Ctl else]  #[span.c__Obj this.]is_adopted = #[span.c__Cst false];]
            }
            #[span.c__Obj Util].#[span.c__Cmd extend(#[span.c__Arg #[span.c__Obj TestSubject], #[span.c__Obj Person]])]; <small class="c__Comm">// extends `TestSubject` from `Person`</small>
            #[span.c__Kwd var] you = #[span.c__Opr new] #[span.c__Cmd TestSubject(#[span.c__Arg #[span.c__Str 'Chell'], #[span.c__Cst true]])]; <small class="c__Comm">// creates an instance of `TestSubject`</small>

            #[small.c__Comm small.c__Comm  (comment)]
            #[strong.c__Emph strong.c__Emph (importance)]

            #[span.c__Ctl .c__Ctl  (control)]                   #[span.c__Tag .c__Tag  (HTML tag)]
            #[span.c__Opr .c__Opr  (delimiter/operator)]        #[span.c__Atr .c__Atr  (HTML attribute)]
            #[span.c__Kwd .c__Kwd  (keyword/type)]              #[span.c__Val .c__Val  (HTML/CSS value)]
            #[span.c__Cst .c__Cst  (constant)]                  #[span.c__Sel .c__Sel  (CSS selector)]
            #[span.c__Str .c__Str  (string)]                    #[span.c__Prp .c__Prp  (CSS property)]
            #[span.c__Cmd .c__Cmd  (command/function)]
            #[span.c__Arg .c__Arg  (argument/variable)]
            #[span.c__Obj .c__Obj  (object)]
          pre.
            #[span.c__Kwd function] #[span.c__Cmd Person(#[span.c__Arg name])] { <small>// constructor for class `Person`</small>
              #[span.c__Obj this].greet = #[span.c__Str 'hello!'];
            }
            #[span.c__Kwd function] #[span.c__Cmd TestSubject(#[span.c__Arg name, adopted])] { <small>// constructor for class `TestSubject`</small>
              #[span.c__Obj Person].#[span.c__Cmd call(#[span.c__Arg #[span.c__Obj this], name, adopted])]; <small>// calls the parent constructor</small>
              #[span.c__Ctl if (#[span.c__Opr typeof] #[span.c__Arg adopted] #[span.c__Opr ==] #[span.c__Str 'boolean'])]
                #[span.c__Obj this.]is_adopted = #[span.c__Arg adopted];
              #[strong #[span.c__Ctl else]  #[span.c__Obj this.]is_adopted = #[span.c__Cst false];]
            }
            #[span.c__Obj Util].#[span.c__Cmd extend(#[span.c__Arg #[span.c__Obj TestSubject], #[span.c__Obj Person]])]; <small>// extends `TestSubject` from `Person`</small>
            #[span.c__Kwd var] you = #[span.c__Opr new] #[span.c__Cmd TestSubject(#[span.c__Arg #[span.c__Str 'Chell'], #[span.c__Cst true]])]; <small>// creates an instance of `TestSubject`</small>
    nav.Bc
      ol.Anc
        li: a.Crumb(rel="top   " href="../index.html   ") Home
        li: a.Crumb(rel="parent" href="../home/web.html") Web
      ul.Sib
        li: a.Crumb(rel="sibling" href="base.html     ") Base Typography
        li: a.Crumb(rel="sibling" href="objects.html  ") Objects
        li: a.Crumb(rel="sibling" href="comp-typo.html") Typo Components
        li: a.Crumb(rel="sibling" href="comp-ui.html  ") UI Components
        li: a.Crumb(rel="this   " href="schemes.html  ") Site Schemes
      ul.Child
    script(src="../bower_components/jquery/dist/jquery.js")
    script(src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML,https://chharvey.github.io/chhlib/mathjax-localconfig.js")
    script(src="../core/scripts/global.js")
    script(src="../core/scripts/Util.js")
    script(src="../core/scripts/Color.js")
    script.
      $('.js-rowbc-swatch').change(function () {
        var orig = $(this).attr('value')
          , value = $(this).val() || orig
        function swatchChange(self, newvalue) {
          $(self).parents('.o-Box').each(function () {
            $(this).attr('style', 'background-color: ' + newvalue + ' !important')
          })
        }
        swatchChange($(this), value)
        $(this).siblings('.js-reset-swatch').click(function () {
          swatchChange($(this), orig)
        })
      })
      var pre = $('#syntax-example')
      $('input[name="bg"]').change(function () {
        pre.removeClass('t-bg-sol-lite t-bg-sol-dark t-bg-lun-lite t-bg-lun-dark')
        if (this.checked) { pre.addClass($(this).val()) }
      })
      $('input[name="fg"]').change(function () {
        pre.removeClass('t-fg-sol-lite t-fg-sol-dark t-fg-lun-lite t-fg-lun-dark')
        if (this.checked) { pre.addClass($(this).val()) }
      })
      $('input[name="ac"]').change(function () {
        pre.removeClass('t-ac-sol t-ac-lun')
        if (this.checked) { pre.addClass($(this).val()) }
      })
      $('#reset-pre').click(function () {
        pre.removeClass()
      })
      function fontdemo(self) {
        return $(self).closest('.o-FlexContainer').find('.c-FontSamp')
      }
      $('input[name="fs"]').change(function () {
        fontdemo(this).css('font-style', (this.checked) ? $(this).val() : '')
      })
      $('input[name="fv"]').change(function () {
        fontdemo(this).css('font-variant', (this.checked) ? $(this).val() : '')
      })
      $('input[name="fw"]').on('input change', function () {
        var val = $(this).val() // a string
        fontdemo(this).css('font-weight', val)
        var norm = (+val == 400) ? ' (normal)' : ''
        var bold = (+val == 700) ? ' (bold)' : ''
        $(this).siblings('input[type="text"]').val(val + norm + bold)
      })
      $('.c-FontForm input[type="reset"]').click(function () {
        fontdemo(this).css('font-style', '').css('font-variant','').css('font-weight', '')
      })
      //- $('#ff-script .c-FontSamp, #ff-script .c-FontSamp *').each(function () {
      //-   var old_lh = parseInt($(this).css('line-height')) / parseInt($(this).css('font-size'))
      //-   $(this).css('line-height', 2 * old_lh)
      //- })
