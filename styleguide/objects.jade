doctype html
html(lang="en" xmlns="http://www.w3.org/1999/xhtml")
  head
    title Objects &in; Site Design
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(rel="stylesheet" href="../styles/chharvey.css")
    link(rel="stylesheet" href="styles/styleguide.css")
  body.o-GoldenContainer
    main.o-GoldenContainer__Content
      h1 Objects
      section#o-Box
        h2 The #[code .o-Box] Object
        p.o-Box.o-Box--island.c-Alert.c-Alert--help.
          #[strong.c-Alert__Title Note:]
          On all types of boxes in this section,
          outlines and backgrounds have been added to show structure.
        figure
          div.h-demo.o-Box               .o-Box
          div.h-demo.o-Box.o-Box--island .o-Box.o-Box--island
          div.h-demo.o-Box.o-Box--dialog .o-Box.o-Box--dialog
          div.h-demo.o-Box.o-Box--hero   .o-Box.o-Box--hero
      section#o-FlexContainer
        h2 The #[code .o-FlexContainer] Object
        .o-FlexContainer
          p.
            You are reading inside a FlexContainer right now.
            See my article #[a(href="../blog/layout.html") The FlexContainer Object].
      section#o-GoldenContainer
        h2 The #[code .o-GoldenContainer] Object
        p.
          See my article #[a(href="../blog/griddemo.html") griddemo.html] for docs on
          the GoldenContainer object.
        p The following is a #[code .o-GoldenContainer] Object, containing 3 children:
        ul
          li a #[code .o-GoldenContainer__Content] Object
          li a #[code .o-GoldenContainer__Sidebar.o-GoldenContainer__Sidebar--major] Object
          li a #[code .o-GoldenContainer__Sidebar.o-GoldenContainer__Sidebar--minor] Object
        form
          p
            input#check-flip(type="checkbox" name="flip" value="flip")
            label(for="check-flip") Add class #[code .o-GoldenContainer--flip] ?
        figure
          .o-GoldenContainer.h-demo(style="margin-bottom:18rem;")
            .o-GoldenContainer__Content.h-demo.
              #[h1.normh1 Content]
              Suspendisse ut auctor enim.
              Aliquam viverra enim vitae ante aliquet venenatis.
              Sed vel nibh sit amet sapien fermentum mattis nec non arcu.
              Praesent dapibus velit quis lectus tempus, ut ullamcorper nibh facilisis.
              Aenean tincidunt ante risus, semper malesuada libero consectetur id.
              Praesent vel ligula ut enim porttitor porta. Aenean eu ullamcorper mi.
              Integer blandit est quam, eget mattis urna scelerisque quis.
              Maecenas sapien sapien, ornare nec lobortis eget, tincidunt sed ligula.
              Maecenas risus nibh, volutpat sed euismod non, semper eget neque.
              Integer varius egestas risus, volutpat sagittis turpis convallis eget.
              Vivamus pulvinar ligula eget mi tincidunt, eget faucibus justo laoreet.
              In sapien lacus, egestas faucibus laoreet eu, tempor sit amet lorem.
              Sed luctus congue tortor a scelerisque.
            .o-GoldenContainer__Sidebar.o-GoldenContainer__Sidebar--major.h-demo(style="color: #1560AB;").
              #[h1.normh1 Major Sidebar]
              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
              Aliquam sagittis suscipit nunc, a cursus libero euismod at.
              Nulla placerat neque massa, quis interdum leo efficitur vel.
              Donec feugiat varius arcu non volutpat.
              Mauris eget mauris ut mauris auctor mattis id vel justo.
              Nulla dictum arcu nec suscipit mollis.
              Maecenas a iaculis nisl, ut pretium est. Nulla facilisi.
            .o-GoldenContainer__Sidebar.o-GoldenContainer__Sidebar--minor.h-demo(style="color: #902929;").
              #[h1.normh1 Minor Sidebar]
              Donec finibus ut lectus finibus pellentesque.
              Nulla euismod feugiat nulla nec posuere.
              Sed ac est id sem sagittis rhoncus eu ac neque.
              Aliquam eu metus sagittis, porta turpis id, scelerisque magna.
          .o-GoldenContainer.h-demo(style="margin-bottom:18rem;")
            .o-GoldenContainer__Content.h-demo
              h1.normh1 Content
              p.
                Sometimes you may have objects #[em inside] the Content that you wish to make
                appear as a sidebar or as if it weren&rsquo;t in the Content.
              .o-GoldenContainer__Content__Page.
                This is a .o- GoldenContainer __Content __Page.
                Even though it is a child of __Content, it appears like material
                elsewhere on the page (not in __Content).
              .o-GoldenContainer__Content__SideMajor.
                This is a .o- GoldenContainer __Content __SideMajor.
                Even though it is a child of __Content, it appears like material
                in a __Sidebar--major.
              .o-GoldenContainer__Content__SideMinor.
                This is a .o- GoldenContainer __Content __SideMinor.
                Even though it is a child of __Content, it appears like material
                in a __Sidebar--minor.
      section#o-Textbox
        h2 The #[code .o-Textbox] Object
        p.
          The following is an #[code .o-Textbox]:
          #[span.o-Textbox.h-demo here I am!]
          Textboxes are inline text only.
      section#o-ListBare
        h2 The #[code .o-ListBare] Object
        p.o-Box.o-Box--island.c-Alert.c-Alert--help.
          #[strong.c-Alert__Title Note:]
          On all lists below, outlines have been added to each line item to show structure.
        p.
          Bare list Objects are semantically no different from normal Lists,
          except that they are displayed without any padding or list styles.
          Use this Object for any list of non-textual elements, for example,
          a list of links in a navigation menu.
        p Every item in the list should be a #[code .o-ListBare__Item] Object.
        figure
          ul.o-ListBare
            li.o-ListBare__Item.h-demo .o-ListBare &gt; .o-ListBare__Item
            li.o-ListBare__Item.h-demo .o-ListBare &gt; .o-ListBare__Item
            li.o-ListBare__Item.h-demo .o-ListBare &gt; .o-ListBare__Item
      section#o-ListInline
        h2 The #[code .o-ListInline] Object
        p.o-Box.o-Box--island.c-Alert.c-Alert--help.
          #[strong.c-Alert__Title Note:]
          On all lists below, outlines have been added to each line item to show structure.
        p.
          Inline list Objects are semantically no different from normal Lists.
          Stylistically, though, they are displayed inline and have inline line items. Essentially,
          they can be used for listing words, spans, labels, badges, and other inline content.
          Wrap this Object in a block if necessary.
        p Every item in the list should be a #[code .o-ListInline__Item] Object.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-demo .o-ListInline &gt; .o-ListInline__Item
            li.o-ListInline__Item.h-demo .o-ListInline &gt; .o-ListInline__Item
            li.o-ListInline__Item.h-demo .o-ListInline &gt; .o-ListInline__Item
      section#h-After
        h2 The #[code .h-After#[span(class="!va:st") &lowast;]] Helpers
        p.
          The following helper classes add content to the #[code ::after] pseudo-element of an element.
          #[code .h-After] adds the empty string as content, so it is mostly useless, save for some
          rare cases.
        p.
          The following elements act like comma-separated list items.
          Use this for a list of keywords, for example. These might take the form of
          #[code li]s inside a #[code ol],
          or they may be simply a list of #[code span]s.
        p.
          The following #[code .o-ListInline] has comma-separated list items.
          Use this for a list of keywords, for example.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterComma.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterComma
            li.o-ListInline__Item.h-AfterComma.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterComma
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p.
          This list has semicolon-separated list items. This can be used to avoid confusion
          if the list items themselves contain commas.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterSem.h-demo    .o-ListInline &gt; .o-ListInline__Item.h-AfterSem
            li.o-ListInline__Item.h-AfterSem.h-demo    .o-ListInline &gt; .o-ListInline__Item.h-AfterSem
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p.
          This list has em-dash-separated list items. This could be used
          in a table of contents to list topic names that don&rsquo;t have section numbers.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterMdash.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterMdash
            li.o-ListInline__Item.h-AfterMdash.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterMdash
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p.
          This list has en-dash-separated list items. This is a variant
          of the em-dash list above.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterNdash.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterNdash
            li.o-ListInline__Item.h-AfterNdash.h-demo  .o-ListInline &gt; .o-ListInline__Item.h-AfterNdash
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p This list has list items separated by circular bullets.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterDisc.h-demo   .o-ListInline &gt; .o-ListInline__Item.h-AfterDisc
            li.o-ListInline__Item.h-AfterDisc.h-demo   .o-ListInline &gt; .o-ListInline__Item.h-AfterDisc
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p This list has list items separated by square bullets.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterSquare.h-demo .o-ListInline &gt; .o-ListInline__Item.h-AfterSquare
            li.o-ListInline__Item.h-AfterSquare.h-demo .o-ListInline &gt; .o-ListInline__Item.h-AfterSquare
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
        p.
          Use the #[code .h-AfterNewline] class to create a line break between items.
          Use #[code .h-AfterNewline@p] to do the same for #[code @media print] only.
        figure
          ol.o-ListInline
            li.o-ListInline__Item.h-AfterNewline.h-demo .o-ListInline &gt; .o-ListInline__Item.h-AfterNewline
            li.o-ListInline__Item.h-demo(class="h-AfterNewline@p") .o-ListInline &gt; .o-ListInline__Item.h-AfterNewline@p
            li.o-ListInline__Item.h-demo               .o-ListInline &gt; .o-ListInline__Item
    nav.Bc
      ol.Anc
        li: a.Crumb(rel="top   " href="../index.html   ") Home
        li: a.Crumb(rel="parent" href="../home/web.html") Web
      ul.Sib
        li: a.Crumb(rel="sibling" href="base.html     ") Base Typography
        li: a.Crumb(rel="this   " href="objects.html  ") Objects
        li: a.Crumb(rel="sibling" href="comp-typo.html") Typo Components
        li: a.Crumb(rel="sibling" href="comp-ui.html  ") UI Components
        li: a.Crumb(rel="sibling" href="schemes.html  ") Site Schemes
      ul.Child
    script(src="../bower_components/jquery/dist/jquery.js")
    script(src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML,https://chharvey.github.io/chhlib/mathjax-localconfig.js")
    script(src="../core/scripts/global.js")
    script.
      var gc = $('#o-GoldenContainer .o-GoldenContainer')
      $('input[name="flip"]').change(function () {
        gc.removeClass('o-GoldenContainer--flip');
        if (this.checked) { gc.addClass('o-GoldenContainer--flip') }
      })
