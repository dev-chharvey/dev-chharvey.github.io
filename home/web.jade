doctype html
html(lang="en" xmlns="http://www.w3.org/1999/xhtml")
  head
    title Web &in; Chris Harvey
    meta(charset="utf-8")
    link(rel="stylesheet" href="../styles/chharvey.css")
    link(rel="stylesheet" href="styles/home.css")
    style.
      #portfolio h3 {
        padding-top: 0.5rem;
        margin-bottom: 0.5rem;
        background: #3d6166;
        color: #f1f6ff;
        text-align: center;
      }
  body.o-GoldenContainer
    main.o-GoldenContainer__Content
      h1.c-FolioTitle(class="!ws:i").
        #[span.c-FolioTitle__Cap T]he #[span.c-FolioTitle__Cap W]eb is my playground.
      p.c-Document.
        During my freshman year of undergrad, I was required to make a homepage
        for myself. I was not too happy about it. Since then, I&rsquo;ve come a long way in
        learning the technologies of the Web. I spend much of my free time on projects; not of
        production, but of comprehension. I&rsquo;m excited to see what technology has in store in the
        future.
      article#portfolio.c-Document(data-status="draft")
        h2 Web Portfolio
        p.o-GoldenContainer__Content__SideMinor.o-Box.o-Box--island.c-Alert.c-Alert--dang.
          This document is a work in progress.
        p.c-Lede.c-Lede--dropcap.
          Below is a showcase of my skills and abilities as a
          web developer. I&rsquo;s broken into two major sections.
          The first section represents a set of Principles of Development, akin to
          Principles of Design. It contains a short description of each principle along with evidence
          that supports it in a concise yet thorough manner.
          The second section focuses on specific technologies and includes sample demonstrations
          of my work.
        section#principles
          h3 Principles of Development
          section#principle-documentation
            h4 Develop Technical Standards &amp; Documentation
            //- tech writings on GitHub Wiki
            //- styleguides (KSS)
            //- apis for javascript
            p.
              Communication is important, even if you&rsquo;re sitting alone at your computer all day.
              Developers shouldn&rsquo;t release their code and products out to the world without
              explaining what it does and how to use it. Commenting your code well, writing good
              documentation and style guides, and releasing a strong
              #[abbr.c-Acro(title="application programming interface") API] are all essential
              skills for any developer.
          section#principle-libraries
            h4 Reference Common Libraries &amp; Frameworks
            //- underscore, etc.
            //- normalize.css
            p.
              Many developers like to start a new project from scratch because they want to use
              #[em their own] code. But why reinvent the wheel? One of the strongest principles a
              developer can have is the ability to reuse code&mdash;that includes old code they&rsquo;ve
              written, as well as old code from other developers. The former involves
              #[a(rel="this" href="#principle-reuse") abstracting reusable components],
              and the latter involves modifying or building on top of others&rsquo;
              code to meet your requirements.
            dl
              dt npm package: #[a(rel="external" href="https://www.npmjs.com/package/xmeter"): cite xmeter]
              dd A default stylesheet with a set of tools that make designing with vertical rhythm easy.
          section#principle-reuse
            h4 Abstract Reusable Components
            //- show why itâ€™s good to abstract and reuse legos
            dl
              dt.
                Node module on #[abbr(title="node package manager") npm]:
                #[a(rel="external" href="https://www.npmjs.com/package/extendclass"): cite extendclass]
              dd.
                A simple prototype-based subclassing function. May be imported and reused
                in any project, eliminating the need to rewrite code.
          section#principle-separation
            h4 Delegate Separation of Concerns
            p.
              Functionality should be separated into components. Each component should be responsible
              for exactly one function, and perform that function extremely well.
              Object-oriented programming technologies such as Java implement this principle by nature.
              On the web, a site&rsquo;s content, presentation, and behavior should be separated into
              HTML, CSS, and JavaScript, respectively.
            dl
              dt(itemscope="" itemtype="https://schema.org/Answer")
                | StackOverflow Answer: 
                a(rel="external" href="http://stackoverflow.com/questions/4198788/is-it-alright-use-to-target-blank-in-html5/17961940#17961940") Is it alright use to #[code target=&quot;_blank&quot;] in HTML5?
                small.o-Textbox.c-Label.c-Label--help(class="!ml:1" itemprop="upvoteCount") 8 votes
              dd A discussion on the seperable behaviors of HTML, CSS, and JS.
              dt
                | GitHub Pull Request: 
                a(rel="external" href="https://github.com/w3c/elements-of-html/pull/14") w3c / #[cite elements-of-html] / #14
                small.o-Textbox.c-Label.c-Label--skss(class="!ml:1") merged
              dd Changed JavaScript from automating inline styles to automating addition of CSS class.
          section#principle-semver
            h4 Adhere to Semantic Versioning &amp; Release
            dl
              dt
                | Blog Article: 
                a(href="../blog/Workflow.md#semantic-versioning"): cite Semantic Versioning
              dd My article on #[abbr(title="semantic versioning") SemVer].
          section#principle-workflow
            h4 Effectively Use Branching &amp; Workflow
            //- collaboration with team members
            figure
              img(src="images/git-branching.png")
              figcaption.c-Caption.
                branching on
                #[a(rel="external" href="https://github.com/chharvey/chharvey.github.io/network") GitHub]
            dl
              dt
                | Blog Article: 
                a(href="../blog/Workflow.md#branching-model"): cite Branching Model
              dd My article on branching with Git.
          section#principle-accessibility
            h4 Support Accessibility, Assistive Technologies, and Old User Agents
            //- h5 Graceful Degradation &amp; Progressive Enhancement
            //- give examples of when to use each
            //- ARIA roles
          section#principle-performance
            h4 Maximize Performance
            //- striking a balance between efficiency and specificity
          section#principle-update
            h4 Stay Up-To-Date with New Features
        section#techs
          h3 Technologies &amp; Systems
          section#tech-semantics
            h4 Diverse, Semantic Data
            dl
              dt
                | GitHub Pull Request: 
                a(rel="external" href="https://github.com/jadejs/jade/pull/1703") jadejs / #[cite jade] / #1703
                small.o-Textbox.c-Label.c-Label--skss(class="!ml:1") merged
              dd Moves tagline from hidden element to #[code img[alt]] attribute.
              dt(itemscope="" itemtype="https://schema.org/Answer")
                | StackOverflow Answer: 
                a(rel="external" href="http://stackoverflow.com/questions/8213434/is-it-good-to-design-a-web-page-using-tags-other-than-div/8213439#8213439") Is it good to design a web page, using tags other than #[code &lt;div&gt;]?
                small.o-Textbox.c-Label.c-Label--help(class="!ml:1" itemprop="upvoteCount") 4 votes
              dd Mentions new sectioning elements introduced in HTML5.
              dt(itemscope="" itemtype="https://schema.org/Answer")
                | StackOverflow Answer: 
                a(rel="external" href="http://stackoverflow.com/questions/16434706/what-is-the-difference-between-p-div-and-span-in-htmlxhtml/23987374#23987374") What is the difference between #[code &lt;p&gt;], #[code &lt;div&gt;], and #[code &lt;span&gt;] in HTML &amp; XHTML?
                small.o-Textbox.c-Label.c-Label--help(class="!ml:1" itemprop="upvoteCount") 4 votes
              dd A discussion on Flow Content #[i(lang="la"): abbr(title="versus") vs.] Phrasing Content.
          section#tech-microdata
            h4 Microdata &amp; Schema.org
            //- Resume is riddled with schema.org microdata
            dl
              dt: a(href="../resume/resume.html") My R&eacute;sum&eacute;
              dd.
                My r&eacute;sum&eacute; is riddled with Microdata using the
                #[a(rel="external" href="https://schema.org") Schema.org] vocabulary.
                Organizations, schools, cities, addresses, events, times, job positions, awards, people,
                and even sports teams are marked up with the infamous
                #[code itemscope], #[code itemtype], and #[code itemprop] attributes.
                Scroll through the
                #[a(rel="external" href="https://github.com/chharvey/chharvey.github.io/blob/master/resume/resume.html") source code]
                for the details.
              dt
                | GitHub Repo (soon to be an npm package?): 
                a(rel="external" href="https://github.com/chharvey/referencelist"): cite referencelist
                small.o-Textbox.c-Label.c-Label--cshn(class="!ml:1"): abbr.c-Acro(title="work in progress") WIP
              dd.
                This program uses #[a(rel="this" href="#tech-d3") D3.js] to generate a list of references
                from a JavaScript object. The output is in HTML with Schema.org microdata.
          section#tech-design
            h4 Layout, Vertical Rhythm, Colors, and other Design Schemes
            dl
              dt(itemscope="" itemtype="https://schema.org/Answer")
                | StackOverflow Answer:
                a(rel="external" href="http://stackoverflow.com/questions/17354724/force-a-group-of-dynamic-links-to-hold-still/17354842#17354842") Force a group of dynamic links to hold still?
                small.o-Textbox.c-Label.c-Label--help(class="!ml:1" itemprop="upvoteCount") 2 votes
                small.o-Textbox.c-Label.c-Label--skss(class="!ml:1") accepted
              dd A demonstration of my old CSS grid system.
              dt
                | Blog Article: 
                a(href="../blog/layout.html"): cite Flexbox Layout
              dd A tutorial on using CSS3 Flexbox to lay out a page.
          section#tech-math
            h4 MathJax &amp; #[span.M \LaTeX]
          section#tech-d3
            h4 #[cite D3.js] &amp; SVG
          section#tech-xml
            h4 XML Schema &amp; XSLT
      section#apps
        h2 My Setup
        ul.o-FlexContainer(class="!xj:sa")
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--apple(rel="external" href="https://www.apple.com/macbook-pro/" title="MacBook Pro: The world&apos;s highest resolution notebook") Mac
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--chrom(rel="external" href="https://www.google.com/chrome"      title="Chrome: Get a fast, free web browser") Chrome
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--atomm(rel="external" href="https://atom.io/"                   title="Atom: A hackable text editor for the 21st Century") Atom
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--gittt(rel="external" href="http://git-scm.com/"                title="git: Sharing code should be as simple as possible") git
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--lessc(rel="external" href="http://lesscss.org/"                title="Less: Leaner CSS") Less
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--jadee(rel="external" href="http://jade-lang.com/"              title="Jade: Node template engine") Jade
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--npmjs(rel="external" href="https://www.npmjs.com/"             title="npm: npm is the package manager for &lsaquo;node&rsaquo;") npm
          li: a.c-IconButton.c-IconButton--rounded.c-IconButton--home.c-IconButton--home--bower(rel="external" href="http://www.bower.io/"               title="bower: a package manager for the web") bower
        footer: small.
          Images above courtesy of bostontechcollective.com, iconarchive.com, github.com,
          adrienliard.fr, hashemiui.com, git-scm.com, pixgood.com, and pubnub.com.
      //- section
      //-   h2 JavaScript Classes
      //-   ul.c-ListAction
      //-     li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/Util.html"): code Util
      //-     li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/Color.html"): code Color
      //-   section
      //-     h3 Discrete Probability Distributions
      //-     ul.c-ListAction
      //-       li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/DiscreteDistribution.html"): code DiscreteDistribution
      //-       li.c-ListAction__Item: a(rel="descendant" href="../core/doc/jslib/DiscreteUniformDistribution.html"): code DiscreteUniformDistribution
      //-       li.c-ListAction__Item: a(rel="descendant" href="../core/doc/jslib/BinomialDistribution.html"): code BinomialDistribution
      //-   section
      //-     h3 Continuous Probability Distributions
      //-     ul.c-ListAction
      //-       li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/ContinuousDistribution.html"): code ContinuousDistribution
      //-       li.c-ListAction__Item: a(rel="descendant" href="../core/doc/jslib/ContinuousUniformDistribution.html"): code ContinuousUniformDistribution
      //-       li.c-ListAction__Item: a(rel="descendant" href="../core/doc/jslib/NormalDistribution.html"): code NormalDistribution
      //-   section
      //-     h3 Geometry
      //-     ul.c-ListAction
      //-       li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/Length.html"): code Length
      //-       li.c-ListAction__Item: a(rel="child" href="../core/doc/jslib/Circle.html"): code Circle
    nav.Bc
      ol.Anc
        li: a.Crumb(rel="top parent" href="../index.html") Home
        li
          a.Crumb(rel="this" href="#") Web
          ul.Sib
            li: a.Crumb(rel="sibling" href="about.html") About Me
            li: a.Crumb(rel="sibling" href="math.html") Mathematics
            li: a.Crumb(rel="sibling" href="edu.html") Education
            li: a.Crumb(rel="sibling" href="music.html") Music
            li: a.Crumb(rel="sibling" href="swim.html") Swimming
      ol.Child
        li: a.Crumb(rel="child" href="../core/doc/grid.html") The Grid
        li: a.Crumb(rel="child" href="../core/doc/typo.html") Typography
        li: a.Crumb(rel="child" href="../core/doc/colors.html") Colors
    script(src="../bower_components/jquery/dist/jquery.js")
    script(src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML,https://chharvey.github.io/chhlib/mathjax-localconfig.js")
    script(src="../core/scripts/global.js")
